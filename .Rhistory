luis <- Clustering::clustering(df = Clustering::basketball,algorithm = c("gmm","clara"), min = 4, max = 5, metrics =c("precision","dunn"))
luis <- Clustering::clustering(df = Clustering::basketball,algorithm = c("gmm","clara"), min = 4, max = 5, metrics =c("precision","dunn"))
luis <- Clustering::clustering(df = Clustering::basketball,algorithm = c("gmm","clara"), min = 4, max = 5, metrics =c("precision","dunn"))
luis <- Clustering::clustering(df = Clustering::basketball,algorithm = c("gmm","clara"), min = 4, max = 5, metrics =c("precision","dunn"))
luis <- Clustering::clustering(df = Clustering::basketball,algorithm = c("gmm","clara"), min = 4, max = 5, metrics =c("precision","dunn"))
luis <- Clustering::clustering(df = Clustering::basketball,algorithm = c("gmm","clara"), min = 4, max = 5, metrics =c("precision","dunn"))
library(Clustering)
luis <- Clustering::clustering(df = Clustering::basketball,algorithm = c("gmm","clara"), min = 4, max = 5, metrics =c("precision","dunn"))
library(Clustering)
luis <- Clustering::clustering(df = Clustering::basketball,algorithm = c("gmm","clara"), min = 4, max = 5, metrics =c("precision","dunn"))
luis
Clustering::plot_external_validation(luis,"precision")
luis <- Clustering::clustering(df = Clustering::basketball,min = 4, max = 5, metrics =c("precision","dunn"))
luis
luis <- Clustering::clustering(df = Clustering::basketball,algorithm = c("gmm","clara"), min = 4, max = 5, metrics =c("precision","dunn"))
Clustering::plot_external_validation(luis,"precision")
Clustering::clustering(df=Clustering::basketball,packages = c("clusterr"), min = 4, max = 6)
Clustering::clustering(df=Clustering::basketball,packages = c("clusterr"), min = 4, max = 6)
ev_gmm_euclidean
Clustering::clustering(df=Clustering::basketball,packages = c("clusterr"), min = 4, max = 6)
me
me
entropy
variation_information
precision
recall
f_measure
Clustering::clustering(df=Clustering::basketball,packages = c("clusterr"), min = 4, max = 6)
Clustering::clustering(df=Clustering::basketball,packages = c("clusterr"), min = 4, max = 6)
ormat(round(entropy, digits = 4),scientific = FALSE)
format(round(entropy, digits = 4),scientific = FALSE)
round(entropy, digits = 4)
round(entropy, digits = 4)
format(round(precision, digits = 4),scientific = FALSE)
entropy
format(round(entropy, digits = 4),scientific = FALSE)
precision
entropy
Clustering::clustering(df=Clustering::basketball,packages = c("clusterr"), min = 4, max = 6)
entropy
as.numeric(entropy)
library(Clustering)
Clustering::clustering(df=Clustering::basketball,packages = c("clusterr"), min = 4, max = 6)
format(round(entropy, digits = 4),scientific = FALSE)
variation_information
precision
recall
f_measure
fowlkes_mallows_index
library(Clustering)
Clustering::clustering(df=Clustering::basketball,packages = c("clusterr"), min = 4, max = 6)
Clustering::clustering(df=Clustering::basketball,packages = c("clusterr"), min = 4, max = 6)
Clustering::clustering(df=Clustering::basketball,packages = c("clusterr"), min = 4, max = 6)
library(Clustering)
Clustering::clustering(df=Clustering::basketball,packages = c("clusterr"), min = 4, max = 6)
library(Clustering)
Clustering::clustering(df=Clustering::basketball,packages = c("clusterr"), min = 4, max = 6)
library(Clustering)
Clustering::clustering(df=Clustering::basketball,packages = c("clusterr"), min = 4, max = 6)
Clustering::clustering(df=Clustering::basketball,packages = c("clusterr"), min = 4, max = 6)
fowlkes_mallows_index
is.na(fowlkes_mallows_index)
is.nan(fowlkes_mallows_index)
is.na(fowlkes_mallows_index)
library(Clustering)
library(Clustering)
Clustering::clustering(df=Clustering::basketball,packages = c("clusterr"), min = 4, max = 6)
Clustering::clustering(df=Clustering::basketball,packages = c("clusterr"), min = 4, max = 6)
fowlkes_mallows_index
is.na(fowlkes_mallows_index)
is.nan(fowlkes_mallows_index)
library(Clustering)
Clustering::clustering(df=Clustering::basketball,packages = c("clusterr"), min = 4, max = 6)
fowlkes_mallows_index
is.na(fowlkes_mallows_index)
is.nan(fowlkes_mallows_index)
library(Clustering)
Clustering::clustering(df=Clustering::basketball,packages = c("clusterr"), min = 4, max = 6)
fowlkes_mallows_index_metric
precision
Clustering::clustering(df=Clustering::basketball,packages = c("clusterr"), min = 4, max = 6, variables = TRUE)
Clustering::clustering(df=Clustering::basketball,packages = c("clusterr"), min = 4, max = 6, variables = TRUE)
result
Clustering::clustering(df=Clustering::basketball,packages = c("clusterr"), min = 4, max = 6, variables = TRUE)
result
Clustering::clustering(df=Clustering::basketball,packages = c("clusterr"), min = 4, max = 6)
result
Clustering::clustering(df=Clustering::basketball,packages = c("clusterr"), min = 4, max = 6)
Clustering::clustering(df=Clustering::basketball,packages = c("clusterr"), min = 4, max = 6)
Clustering::clustering(df=Clustering::basketball,packages = c("clusterr"), min = 4, max = 6)
df_external
Clustering::clustering(df=Clustering::basketball,packages = c("clusterr"), min = 4, max = 6)
Clustering::clustering(df=Clustering::basketball,packages = c("clusterr"), min = 4, max = 6)
df_external
tableExternal
tableExternal
Clustering::clustering(df=Clustering::basketball,packages = c("clusterr"), min = 4, max = 6)
tableExternal
library(Clustering)
Clustering::clustering(df=Clustering::basketball,packages = c("clusterr"), min = 4, max = 6)
library(Clustering)
Clustering::clustering(df=Clustering::basketball,packages = c("clusterr"), min = 4, max = 6)
result
result
result
result
result
result
result
result
result
result
result
result
result
result
result
result
result
result
result
result
result
result
result
result
result
resultÂº
result
result
result
resultÂº
result
result
result
result
result
result
result
result
result
result
result
result
result
Clustering::clustering(df=Clustering::basketball,packages = c("clusterr"), min = 4, max = 6)
library(Clustering)
Clustering::clustering(df=Clustering::basketball,packages = c("clusterr"), min = 4, max = 6)
library(Clustering)
Clustering::clustering(df=Clustering::basketball,packages = c("clusterr"), min = 4, max = 6)
df_external
library(Clustering)
Clustering::clustering(df=Clustering::basketball,packages = c("clusterr"), min = 4, max = 6)
df_external
library(Clustering)
Clustering::clustering(df=Clustering::basketball,packages = c("clusterr"), min = 4, max = 6)
Clustering::clustering(df=Clustering::basketball,packages = c("clusterr"), min = 4, max = 6)
rowCountLatex
df_external[1:CONST_ONE,]
library(Clustering)
Clustering::clustering(df=Clustering::basketball,packages = c("clusterr"), min = 4, max = 6)
df_external
Clustering::clustering(df=Clustering::basketball,packages = c("clusterr"), min = 4, max = 6)
df_external
df_external
df_external
df_external
df_external
df_external
df_external
df_external
df_external
df_external
df_external
df_external
df_external
df_external
library(Clustering)
Clustering::clustering(df=Clustering::basketball,packages = c("clusterr"), min = 4, max = 6)
Clustering::clustering(df=Clustering::basketball,packages = c("clusterr"), min = 4, max = 6)
library(Clustering)
Clustering::clustering(df=Clustering::basketball,packages = c("clusterr"), min = 4, max = 6)
Clustering::clustering(df=Clustering::basketball,packages = c("clusterr"), min = 4, max = 6)
Clustering::clustering(df=Clustering::basketball,packages = c("clusterr"), min = 4, max = 6)
nrow(df_external)
nrow(df_external)
df_external
Clustering::clustering(df=Clustering::basketball,packages = c("clusterr"), min = 4, max = 6)
library(Clustering)
Clustering::clustering(df=Clustering::basketball,packages = c("clusterr"), min = 4, max = 6)
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
library(Clustering)
library(Clustering)
Clustering::appClustering()
library(Clustering)
Clustering::appClustering()
library(Clustering)
Clustering::appClustering()
system.file("shiny", "clustering")
system.file("shiny", "clustering", package = "Clustering")
library(Clustering)
Clustering::appClustering()
devtools::install_github("MarkEdmondson1234/gentelellaShiny")
install.packages("googleAnalyticsR")
library(Clustering)
Clustering::appClustering()
Clustering::appClustering()
runApp('inst/shiny/clustering')
runApp('inst/shiny/clustering')
runApp('inst/shiny/clustering')
runApp('inst/shiny/clustering')
install.packages("shinythemes")
runApp('inst/shiny/clustering')
shiny::runApp('inst/shiny/clustering')
shiny::runApp('inst/shiny/clustering')
runApp('inst/shiny/clustering')
shiny::runApp('inst/shiny/clustering')
install.packages("shinyWidgets")
runApp('inst/shiny/clustering')
runApp('inst/shiny/clustering')
runApp('inst/shiny/clustering')
runApp('inst/shiny/clustering')
install.packages("DT")
runApp('inst/shiny/clustering')
input$packages
input$datasetTest
runApp('inst/shiny/clustering')
input$visible
df
df_result
df_result$result
install.packages("shinycssloading")
runApp('inst/shiny/clustering')
install.packages("DT")
install.packages("shinycssloading")
runApp('inst/shiny/clustering')
runApp('inst/shiny/clustering')
input$clustering
input$clustering[0]
input$clustering(1)
input$clustering[0]
input$clustering(1:1)
input$clustering(1)
input$clustering(0)
input$clustering[1:1]
input$clustering[1:2]
input$clustering[2]
input$clustering[1]
runApp('inst/shiny/clustering')
runApp('inst/shiny/clustering')
runApp('inst/shiny/clustering')
runApp('inst/shiny/clustering')
input$algorithm
runApp('inst/shiny/clustering')
runApp()
runApp('inst/shiny/clustering')
install.packages("shinyjs")
runApp('inst/shiny/clustering')
runApp('inst/shiny/clustering')
runApp('inst/shiny/clustering')
shiny::runApp('inst/shiny/clustering')
input$visible
runApp('inst/shiny/clustering')
input$visible
c
c
c
c
runApp('inst/shiny/clustering')
input$packages
input$algorithm
input$packages
runApp('inst/shiny/clustering')
runApp('inst/shiny/clustering')
runApp('inst/shiny/clustering')
runApp('inst/shiny/clustering')
runApp('inst/shiny/clustering')
runApp('inst/shiny/clustering')
runApp()
runApp('inst/shiny/clustering')
runApp('inst/shiny/clustering')
install.packages("shinycssloaders")
runApp('inst/shiny/clustering')
runApp('inst/shiny/clustering')
runApp('inst/shiny/clustering')
runApp('inst/shiny/clustering')
runApp('inst/shiny/clustering')
runApp('inst/shiny/clustering')
runApp('inst/shiny/clustering')
runApp('inst/shiny/clustering')
install.packages("waiter")
runApp('inst/shiny/clustering')
runApp('inst/shiny/clustering')
runApp('inst/shiny/clustering')
runApp('inst/shiny/clustering')
runApp('inst/shiny/clustering')
runApp('inst/shiny/clustering')
runApp('inst/shiny/clustering')
runApp('inst/shiny/clustering')
install.packages("shinyalert")
runApp('inst/shiny/clustering')
runApp('inst/shiny/clustering')
e
e$message
runApp('inst/shiny/clustering')
shiny::runApp('inst/shiny/clustering')
runApp('inst/shiny/clustering')
runApp('inst/shiny/clustering')
library(Clustering)
runApp('inst/shiny/clustering')
algorithms()
algorithm
algorithm[i]
library(Clustering)
runApp('inst/shiny/clustering')
library(Clustering)
if (tolower(algorithm[i]) == tolower(CONST_FUZZY_CM)) {
result <- c(result, CONST_FUZZY_CM)
}
library(Clustering)
library(Clustering)
runApp('inst/shiny/clustering')
library(Clustering)
library(Clustering)
runApp('inst/shiny/clustering')
library(Clustering)
runApp('inst/shiny/clustering')
input$dir
input
global$datapath
runApp('inst/shiny/clustering')
runApp('inst/shiny/clustering')
runApp('inst/shiny/clustering')
CONST_FUZZY_CM
shiny::runApp('inst/shiny/clustering')
runApp()
tolower(input$packages[n])
runApp('inst/shiny/clustering')
clusterr_algoruthm
alg
runApp('inst/shiny/clustering')
runApp('inst/shiny/clustering')
runApp('inst/shiny/clustering')
selectedAlgorithm
runApp('inst/shiny/clustering')
selectedAlgorithm
selectedAlgorithm
amap_algorithm
input$algorithm
runApp('inst/shiny/clustering')
runApp('inst/shiny/clustering')
runApp('inst/shiny/clustering')
runApp('inst/shiny/clustering')
runApp('inst/shiny/clustering')
selectedAlgorithm
input$packages
input$algorithm
clusterr_algorithm
input$algorithm
input$packages
library(Clustering)
runApp('inst/shiny/clustering')
input$packages
input$algorithm
clusterr_algorithm[alg]
runApp('inst/shiny/clustering')
input$algorithm
input$packages
clusterr_algorithm
input$packages
input$algorithm
runApp('inst/shiny/clustering')
selectedAlgorithm
runApp('inst/shiny/clustering')
input$algorithm)
input$algorithm
amap_algorithm[alg]
selectedAlgorithm
selectedAlgorithm
runApp('inst/shiny/clustering')
runApp('inst/shiny/clustering')
cluster_algorithm[alg]
selectedAlgorithm
runApp()
runApp('inst/shiny/clustering')
runApp('inst/shiny/clustering')
runApp('inst/shiny/clustering')
runApp()
runApp('inst/shiny/clustering')
runApp('inst/shiny/clustering')
selectedAlgorithm
input$algorithm
runApp('inst/shiny/clustering')
runApp('inst/shiny/clustering')
runApp('inst/shiny/clustering')
input$algorithm
runApp('inst/shiny/clustering')
runApp('inst/shiny/clustering')
runApp('inst/shiny/clustering')
runApp('inst/shiny/clustering')
runApp('inst/shiny/clustering')
algorithm_clustering[a]
runApp('inst/shiny/clustering')
input$algorithm
input$algorithm[a]
selectedPackage
clusterr_algorithm
algorithm_clustering[a]
algorithm_clustering[a] %in% cluster_algorithm
cluster_algorithm
algorithm_clustering[a]
runApp('inst/shiny/clustering')
runApp('inst/shiny/clustering')
runApp('inst/shiny/clustering')
runApp('inst/shiny/clustering')
shiny::runApp('inst/shiny/clustering')
roxygen2::roxygenise()
library(Clustering)
roxygen2::roxygenise()
roxygen2::roxygenise()
library(Clustering)
runApp('inst/shiny/clustering')
runApp('inst/shiny/clustering')
runApp('inst/shiny/clustering')
runApp('inst/shiny/clustering')
library(Clustering)
runApp('inst/shiny/clustering')
library(Clustering)
runApp('inst/shiny/clustering')
result_external
shiny::runApp('inst/shiny/clustering')
library(Clustering)
runApp('inst/shiny/clustering')
library(Clustering)
runApp('inst/shiny/clustering')
library(Clustering)
runApp('inst/shiny/clustering')
algorithms()
runApp('inst/shiny/clustering')
runApp('inst/shiny/clustering')
library(Clustering)
runApp('inst/shiny/clustering')
runApp('inst/shiny/clustering')
fields
queyr
query
library(Clustering)
runApp('inst/shiny/clustering')
query
calculate_by_metrics
calculate_by_metrics
hasExternalMetrics <- ifelse(df$hasExternalMetrics, 1, 0)
runApp('inst/shiny/clustering')
name_metric
metric
name_metric
maximum
break_points
runApp('inst/shiny/clustering')
shiny::runApp('inst/shiny/clustering')
runApp()
runApp('inst/shiny/clustering')
runApp('inst/shiny/clustering')
library(Clustering)
runApp('inst/shiny/clustering')
runApp('inst/shiny/clustering')
shiny::runApp('inst/shiny/clustering')
shiny::runApp('inst/shiny/clustering')
runApp('inst/shiny/clustering')
runApp('inst/shiny/clustering')
result
result[1]
runApp('inst/shiny/clustering')
library(Clustering)
runApp('inst/shiny/clustering')
result
runApp('inst/shiny/clustering')
runApp('inst/shiny/clustering')
shiny::runApp('inst/shiny/clustering')
e
e
e$message
e$message
runApp('inst/shiny/clustering')
library(Clustering)
runApp('inst/shiny/clustering')
library(Clustering)
shiny::runApp('inst/shiny/clustering')
dplyr::filter(as.data.frame(df_result$result))
dplyr::filter(as.data.frame(df_result$result), Ranking = 1)
dplyr::filter(as.data.frame(df_result$result), Ranking == 1)
dplyr::filter(as.data.frame(df_result$result), Ranking == 1) %>% select(columnames)
dplyr::filter(as.data.frame(df_result$result), Ranking == 1) %>% select(c('precision'))
runApp('inst/shiny/clustering')
shiny::runApp('inst/shiny/clustering')
shiny::runApp('inst/shiny/clustering')
data
data
library(Clustering)
runApp('inst/shiny/clustering')
data
data
sapply(data, class)
data
data
data
data
runApp('inst/shiny/clustering')
data
library(Clustering)
