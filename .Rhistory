rm(list = c("clustering"))
roxygen2::roxygenize()
library(Clustering)
result <- clustering(package = 'clusterr', df = Clustering::basketball, min=3, max=4)
sort(result, FALSE, 'dunn')
result <- Clustering::clustering(df = Clustering::basketball, min = 3, max = 5, algorithm = c('gmm', 'fanny'), metrics = c('entropy','dunn'))
result <- Clustering::best_ranked_external_metrics(result);
sort(result,F,'entropy')
library(Clustering)
sort(result,F,'entropy')
library(Clustering)
sort(result,F,'entropy')
sort(result,F,'entropy')result <- clustering(package = 'clusterr', df = Clustering::basketball, min=3, max=4)
result <- clustering(package = 'clusterr', df = Clustering::basketball, min=3, max=4)
sort(result, FALSE, 'dunn')
library(Clustering)
sort(result, FALSE, 'dunn')
sort(result, T, 'dunn')
result <- Clustering::clustering(df = Clustering::basketball, min = 3, max = 5, algorithm = c('gmm', 'fanny'), metrics = c('entropy','dunn'))
sort(result,F,'entropy')
result <- Clustering::clustering(df = Clustering::basketball, min = 3,algorithm = c('gmm', 'fanny'), metrics = c('entropy','dunn'))
result
result <- Clustering::clustering(df = Clustering::basketball, min = 3,algorithm = c('gmm'), metrics = c('entropy','dunn'))
result
result <- Clustering::clustering(df = Clustering::basketball, min = 3, max=3, algorithm = c('gmm'), metrics = c('entropy','dunn'))
result
result[entropy > 0.11]
Clustering::appClustering()
Clustering::basketball
result <- Clustering::clustering(df = Clustering::basketball, min = 3, max=3, algorithm = c('gmm'), metrics = c('entropy','dunn'))
result
result <- Clustering::clustering(df = Clustering::basketball, min = 3, max=5, algorithm = c('gmm', 'fanny'), metrics = c('entropy','dunn'))
result
Clustering::appClustering()
result <- Clustering::clustering(df = Clustering::basketball, min = 3, max=5, algorithm = c('gmm', 'fanny'), metrics = c('entropy','dunn'))
Clustering::best_ranked_external_metrics(result)
Clustering::evaluate_validation_external_by_metrics(result)
install.packages("yaml")
cS <- as.character(Sp <- iris$Species)
cS[Sp == "setosa"] <- "S"
cS[Sp == "versicolor"] <- "V"
cS[Sp == "virginica"] <- "g"
ai <- agnes(iris[, 1:4])
data(iris)
cS <- as.character(Sp <- iris$Species)
cS[Sp == "setosa"] <- "S"
cS[Sp == "versicolor"] <- "V"
cS[Sp == "virginica"] <- "g"
ai <- agnes(iris[, 1:4])
plot(ai, labels = cS, nmax = 150)
library(cluster)
cS[Sp == "setosa"] <- "S"
cS[Sp == "versicolor"] <- "V"
cS[Sp == "virginica"] <- "g"
ai <- agnes(iris[, 1:4])
plot(ai, labels = cS, nmax = 150)
plot(ai, labels = cS, nmax = 10)
library(ClusterR)
data(dietary_survey_IBS)
dat = dietary_survey_IBS[, -ncol(dietary_survey_IBS)]
dat = center_scale(dat)
pca_dat = stats::princomp(dat)$scores[, 1:2]
m = KMeans_rcpp(pca_dat, clusters = 2, num_init = 5, max_iters = 100)
plot_2d(pca_dat, km$clusters, km$centroids)
km = KMeans_rcpp(pca_dat, clusters = 2, num_init = 5, max_iters = 100)
plot_2d(pca_dat, km$clusters, km$centroids)
library(dbscan)
install.packages("dbscan")
data(moons)
library(dbscan)
install.packages(c("backports", "bit64", "broom", "callr", "car", "chron", "cli", "clipr", "conquer", "covr", "cowplot", "cpp11", "dendextend", "devtools", "dplyr", "DT", "foreach", "future", "ggvis", "globals", "glue", "gmp", "htmlwidgets", "iterators", "jsonlite", "kableExtra", "knitr", "maptools", "matrixStats", "openssl", "openxlsx", "processx", "ps", "quantreg", "RcppArmadillo", "readr", "Rfast", "rlang", "rmarkdown", "RSQLite", "rticles", "shinyalert", "shinyjs", "shinyWidgets", "sp", "stringi", "tibble", "tidyr", "tinytex", "usethis", "vctrs", "withr", "xfun", "zip"))
install.packages(c("MASS", "mgcv", "nlme", "survival"), lib="/Library/Frameworks/R.framework/Versions/4.0/Resources/library")
install.packages(c("backports", "bit64", "broom"))
install.packages(c("callr", "car", "chron", "cli", "clipr", "conquer", "covr", "cowplot", "cpp11"))
install.packages(c("dendextend", "devtools", "dplyr", "DT", "foreach"))
install.packages(c("nlme", "survival"), lib="/Library/Frameworks/R.framework/Versions/4.0/Resources/library")
install.packages(c("xfun", "zip"))
install.packages(c("MASS", "mgcv"), lib="/Library/Frameworks/R.framework/Versions/4.0/Resources/library")
library("dbscan")
data(moons)
res <- hdbscan(moons, minPts = 5)
plot(res)
data("DS3")
res <- hdbscan(DS3, minPts = 50)
res
res <- hdbscan(DS3, minPts = 50)
res
plot(res, show_flat = TRUE)
plot(DS3, col=res$cluster+1L, cex = .5)
set.seed(2)
n <- 20
x <- cbind(
x = runif(4, 0, 1) + rnorm(n, sd=0.1),
y = runif(4, 0, 1) + rnorm(n, sd=0.1)
)
plot(x, xlim=range(x), ylim=c(min(x)-sd(x), max(x)+sd(x)), pch=20)
text(x = x, labels = 1:nrow(x), pos=3)
res <- optics(x, eps = 10,  minPts = 2)
res
plot(res)
data(iris)
x <- iris[, -5]
nn <- kNN(x, k=5)
nn
plot(nn, x)
plot the kNN where NN are shown as line conecting points.
plot(nn, x)
# show the first few elements of the adjacency list
head(adjacencylist(nn))
# create a graph and find connected components (if igraph is installed)
if("igraph" %in% installed.packages()){
library("igraph")
g <- graph_from_adj_list(adjacencylist(nn))
comp <- components(g)
plot(x, col = comp$membership)
# detect clusters (communities) with the label propagation algorithm
cl <- membership(cluster_label_prop(g))
plot(x, col = cl)
}
data(moons)
res <- hdbscan(moons, minPts = 5)
res
plot(res)
plot(moons, col = res$cluster + 1L)
## DS3 from Chameleon
data("DS3")
res <- hdbscan(DS3, minPts = 50)
res
## Plot the simplified tree, highlight the most stable clusters
plot(res, show_flat = TRUE)
## Plot the actual clusters
plot(DS3, col=res$cluster+1L, cex = .5)
# Example 1: use dbscan on the iris data set
data(iris)
iris <- as.matrix(iris[,1:4])
## find suitable eps parameter using a k-NN plot for k = dim + 1
## Look for the knee!
kNNdistplot(iris, k = 5)
abline(h=.5, col = "red", lty=2)
res <- dbscan(iris, eps = .5, minPts = 5)
res
pairs(iris, col = res$cluster + 1L)
r <- frNN(iris, eps = .5)
dbscan(fr, minPts = 5)
## Example 2: use data from fpc
set.seed(665544)
n <- 100
x <- cbind(
x = runif(10, 0, 10) + rnorm(n, sd = 0.2),
y = runif(10, 0, 10) + rnorm(n, sd = 0.2)
)
res <- dbscan(x, eps = .3, minPts = 3)
res
## plot clusters and add noise (cluster 0) as crosses.
plot(x, col=res$cluster)
points(x[res$cluster==0,], pch = 3, col = "grey")
hullplot(x, res)
## Example 1: use dbscan on the iris data set
data(iris)
iris <- as.matrix(iris[,1:4])
## find suitable eps parameter using a k-NN plot for k = dim + 1
## Look for the knee!
kNNdistplot(iris, k = 5)
abline(h=.5, col = "red", lty=2)
res <- dbscan(iris, eps = .5, minPts = 5)
res
pairs(iris, col = res$cluster + 1L)
## use precomputed frNN
fr <- frNN(iris, eps = .5)
dbscan(fr, minPts = 5)
## Example 2: use data from fpc
set.seed(665544)
n <- 100
x <- cbind(
x = runif(10, 0, 10) + rnorm(n, sd = 0.2),
y = runif(10, 0, 10) + rnorm(n, sd = 0.2)
)
res <- dbscan(x, eps = .3, minPts = 3)
res
plot(x, col=res$cluster)
points(x[res$cluster==0,], pch = 3, col = "grey")
hullplot(x, res)
library(Clustering)
result <- Clustering::clustering(df = Clustering::basketball, min = 3, max = 5,algorithm = c('gmm', 'fanny'), metrics = c('entropy','dunn'))
result
library(Clustering)
result <- Clustering::clustering(df = Clustering::basketball, min = 3, max = 5,algorithm = c('gmm', 'fanny'), metrics = c('entropy','dunn'))
result
result <- Clustering::clustering(df = Clustering::basketball, min = 3, max = 5,algorithm = c('gmm', 'fanny'), metrics = c('entropy','dunn'), variables = T)
result
result <- Clustering::clustering(df = Clustering::basketball, min = 3, max = 5,algorithm = c('gmm', 'fanny'), metrics = c('entropy','dunn'), variables = T)
View(information)
result_information[pos]
paste(result_information[pos], format(round(
x = as.numeric(result_information_aux[pos]),
digits = 4
), scientific = F), sep = " -> V")
pos
result_information
result <- Clustering::clustering(df = Clustering::basketball, min = 3, max = 5,algorithm = c('gmm', 'fanny'), metrics = c('entropy','dunn'), variables = T)
df_result[1:rowCount,]
Clustering::clustering(df = Clustering::basketball, min = 3, max = 5,algorithm = c('gmm', 'fanny'), metrics = c('entropy','dunn'), variables = T)
metrics_execute
library(Clustering)
Clustering::clustering(df = Clustering::basketball, min = 3, max = 5,algorithm = c('gmm', 'fanny'), metrics = c('entropy','dunn'), variables = T)
numberColumns
Clustering::clustering(df = Clustering::basketball, min = 3, max = 5,algorithm = c('gmm', 'fanny'), metrics = c('entropy','dunn'), variables = T)
library(Clustering)
Clustering::clustering(df = Clustering::basketball, min = 3, max = 5,algorithm = c('gmm', 'fanny'), metrics = c('entropy','dunn'), variables = T)
library(Clustering)
Clustering::clustering(df = Clustering::basketball, min = 3, max = 5,algorithm = c('gmm', 'fanny'), metrics = c('entropy','dunn'), variables = T)
result_information_aux
information
result_information[pos]
library(Clustering)
Clustering::clustering(df = Clustering::basketball, min = 3, max = 5,algorithm = c('gmm', 'fanny'), metrics = c('entropy','dunn'), variables = T)
result_information_aux
length(information)
information
pos
result_information
library(Clustering)
Clustering::clustering(df = Clustering::basketball, min = 3, max = 5,algorithm = c('gmm', 'fanny'), metrics = c('entropy','dunn'), variables = T)
length(measures_execute)
length(metrics_execute)
numberColumns
library(Clustering)
Clustering::clustering(df = Clustering::basketball, min = 3, max = 5,algorithm = c('gmm', 'fanny'), metrics = c('entropy','dunn'), variables = T)
pos
result_information
result_information_aux
library(Clustering)
Clustering::clustering(df = Clustering::basketball, min = 3, max = 5,algorithm = c('gmm', 'fanny'), metrics = c('entropy','dunn'), variables = T)
result_information
library(Clustering)
Clustering::clustering(df = Clustering::basketball, min = 3, max = 5,algorithm = c('gmm', 'fanny'), metrics = c('entropy','dunn'), variables = T)
metrics_execute
numberColumns
result_information
Clustering::clustering(df = Clustering::basketball, min = 3, max = 5,algorithm = c('gmm', 'fanny'), metrics = c('entropy','dunn'), variables = T)
pos
result_information
numberColumns
pos_aux
result_information
result_information_aux
pos_aux
library(Clustering)
Clustering::clustering(df = Clustering::basketball, min = 3, max = 5,algorithm = c('gmm', 'fanny'), metrics = c('entropy','dunn'), variables = T)
result_information
pos
result_information
pos
numberColumns
length(information)
library(Clustering)
Clustering::clustering(df = Clustering::basketball, min = 3, max = 5,algorithm = c('gmm', 'fanny'), metrics = c('entropy','dunn'), variables = T)
library(Clustering)
Clustering::clustering(df = Clustering::basketball, min = 3, max = 5,algorithm = c('gmm', 'fanny'), metrics = c('entropy','dunn'), variables = T)
sort(result)
result <- Clustering::clustering(df = Clustering::basketball, min = 3, max = 5,algorithm = c('gmm', 'fanny'), metrics = c('entropy','dunn'), variables = T)
result
sort(result,'FALSE',entropyVar)
sort(result,'FALSE','entropyVar')
sort(result,'FALSE','entropy')
sort(result,FALSE,'entropyVar')
result
result[precision > 0.14 & dunn > 0.11]
result[dunn > 0.11]
result[dunn > 0.11 && dunnVar =1]
result[dunn > 0.11 && dunnVar = 1]
result[dunn > 0.11 && dunnVar == 1]
result[dunn > 0.11 && dunnVar <= 1]
result[dunn > 0.11 && dunnVar = 1]
result[dunn > 0.11 && dunnVar == 1]
result[dunn > 0.11]
result[dunn > 0.13]
result[dunn > 0.13 & dunnVar = 1]
result[dunn > 0.13 & dunnVar == 1]
esult[dunn > 0.11 && dunnVar == 1]
result[dunn > 0.11 && dunnVar == 1]
result[dunn > 0.11 & dunnVar == 1]
lustering::best_ranked_external_metrics(result)
Clustering::best_ranked_external_metrics(result)
library(Clustering)
Clustering::best_ranked_external_metrics(result)
metrics
metrics[iterate]
Clustering::best_ranked_external_metrics(result)
metrics[iterate]
tolower(metrics[iterate]
tolower(metrics[iterate])
CONST_ENTROPY_METRIC_VAR
library(Clustering)
Clustering::best_ranked_external_metrics(result)
metrics
library(Clustering)
Clustering::best_ranked_external_metrics(result)
CONST_TIME_EXTERNAL_VAR
CONST_TIME_EXTERNAL_VAR %in% metrics())
CONST_TIME_EXTERNAL_VAR %in% metrics()
metrics
CONST_TIME_EXTERNAL_VAR
"timeExternalVar" %in% metrics()
match('timeExternalVar',metrics())
is.array(metrics())
is.vector(metrics())
'timeExternalVar' %in% metrics()
"timeExternalVar" %in% metrics()
is.element('timeExternalVar', metrics())
library(Clustering)
Clustering::best_ranked_external_metrics(result)
library(Clustering)
Clustering::best_ranked_external_metrics(result)
Clustering::best_ranked_internal_metrics(result)
Clustering::evaluate_best_validation_external_by_metrics(result)
Clustering::evaluate_validation_external_by_metrics(result)
Clustering::plot_clustering(result,'entroypy')
Clustering::plot_clustering(result,'entropy')
result <- Clustering::clustering(df = Clustering::basketball, min = 3, max = 5,algorithm = c('gmm', 'fanny'), variables = T)
result
Clustering::best_ranked_external_metrics(result)
Clustering::evaluate_best_validation_external_by_metrics(result)
Clustering::evaluate_validation_external_by_metrics(result)
result <- Clustering::clustering(df = Clustering::basketball, min = 3, max = 5,algorithm = c('gmm', 'fanny'), variables = F)
Clustering::best_ranked_external_metrics(result)
library(Clustering)
Clustering::best_ranked_internal_metrics(result)
library(Clustering)
Clustering::best_ranked_internal_metrics(result)
library(Clustering)
Clustering::best_ranked_internal_metrics(result)
metrics
result <- Clustering::clustering(df = Clustering::basketball, min = 3, max = 5,algorithm = c('gmm', 'fanny'), variables = T)
Clustering::best_ranked_internal_metrics(result)
Clustering::appClustering
Clustering::appClustering()
roxygen2::roxygenize()
rm(list= c("clustering",result))
roxygen2::roxygenize()
roxygen2::roxygenise()
rm(lis=c("result"))
rm(list = c("result"))
roxygen2::roxygenize()
library(Clustering)
result <- clustering(package = 'clusterr', df = Clustering::basketball, min=3, max=3)
sort(result, FALSE, 'dunn')
library(Clustering)
result <- clustering(package = 'clusterr', df = Clustering::basketball, min=3, max=3)
result
#' clustering(
#'      df = cluster::agriculture,
#'      min = 4,
#'      max = 5,
#'      algorithm=c('gmm','funny'),
#'      metrics='precision'
#' )
result <- Clustering::clustering(df = cluster::agriculture, min = 4, max = 5, algorithm=c('gmm','funny'), metrics='precision')
result <- Clustering::clustering(df = cluster::agriculture, min = 4, max = 4, algorithm=c('gmm','funny'), metrics='precision')
result <- Clustering::clustering(df = cluster::agriculture, min = 4, max = 4, algorithm=c('gmm','fanny'), metrics='precision')
result
sort(precision)
sort(result, FALSE, 'precision')
sort(result, T, 'precision')
roxygen2::roxygenize()
rm(list = c("result"))
roxygen2::roxygenize()
library(Clustering)
algorithm = c('gmm', 'fanny'), metrics = c('entropy','dunn'), attributes = )T
algorithm = c('gmm', 'fanny'), metrics = c('entropy','dunn'), attributes = T )
algorithm = c('gmm', 'fanny'), metrics = c('entropy','dunn'), attributes = )T
result <- Clustering::clustering(df = Clustering::basketball, min = 3, max = 5,algorithm = c('gmm', 'fanny'), metrics = c('entropy','dunn'), attributes = T)
result
result <- clustering(df = cluster::agriculture,min = 4, max = 4,algorithm='gmm',metrics='recall')
sort(result, T, 'recall')
sort(result, F, 'recall')
roxygen2::roxygenize()
rm(list = c('result'))
roxygen2::roxygenize()
library(Clustering)
roxygen2::roxygenize()
library(Clustering)
result <- Clustering::clustering(df = Clustering::basketball, min = 3, max = 5,algorithm = c('gmm', 'fanny'), metrics = c('entropy','dunn'), attributes = T)
result
library(Clustering)
result <- Clustering::clustering(df = Clustering::basketball, min = 3, max = 5,algorithm = c('gmm', 'fanny'), metrics = c('entropy','dunn'), attributes = T)
result
result <- Clustering::clustering(df = Clustering::basketball, min = 3, max = 5,algorithm = c('gmm', 'fanny'), metrics = c('entropy','dunn'), attributes = T)
result
result <- Clustering::clustering(df = Clustering::basketball, min = 3, max = 5,algorithm = c('gmm','fanny'), metrics = c('entropy','dunn'), attributes = T)
Clustering::best_ranked_external_metrics(result)
Clustering::result_external_algorithm_by_metric(result,'gmm')
Clustering::best_ranked_internal_metrics(result)
Clustering::evaluate_best_validation_external_by_metrics(result)
Clustering::evaluate_validation_external_by_metrics(result)
lustering::result_external_algorithm_by_metric(result,'gmm')
Clustering::result_external_algorithm_by_metric(result,'gmm')
result <- Clustering::clustering(df = Clustering::basketball, min = 3, max=3, algorithm = c('gmm'), metrics = c('entropy','dunn'), attributes = T)
sort(result,F,'entropy')
result[entropy > 0.11 & dunn > 0.11 ]
result[entropy > 0.11 & dunn > 0.11 & entropyAttr = 2]
result[entropy > 0.11 & dunn > 0.11 & entropyAttr == 2]
Clustering::appClustering()
library(Clustering)
Clustering::appClustering()
data(dietary_survey_IBS)
dat = dietary_survey_IBS[, -ncol(dietary_survey_IBS)]
library("ClusterR")
data(dietary_survey_IBS)
dat = dietary_survey_IBS[, -ncol(dietary_survey_IBS)]
dat = center_scale(dat)
pca_dat = stats::princomp(dat)$scores[, 1:2]
km = KMeans_rcpp(pca_dat, clusters = 2, num_init = 5, max_iters = 100)
plot_2d(pca_dat, km$clusters, km$centroids)
library("mclust")
precipMclust <- Mclust(precip)
plot(precipMclust)
dens <- densityMclust(faithful$waiting)
summary(dens)
summary(dens, parameters = TRUE)
plot(dens, what = "density", data = faithful$waiting)
summary(mod1)
mod2 <- Mclust(iris[,1:4], G = 3)
summary(mod2, parameters = TRUE)
# Using prior
mod3 <- Mclust(iris[,1:4], prior = priorControl())
summary(mod3)
mod4 <- Mclust(iris[,1:4], prior = priorControl(functionName="defaultPrior", shrinkage=0.1))
summary(mod4)
# Clustering of faithful data with some artificial noise added
nNoise <- 100
set.seed(0) # to make it reproducible
Noise <- apply(faithful, 2, function(x)
runif(nNoise, min = min(x)-.1, max = max(x)+.1))
data <- rbind(faithful, Noise)
plot(faithful)
points(Noise, pch = 20, cex = 0.5, col = "lightgrey")
set.seed(0)
NoiseInit <- sample(c(TRUE,FALSE), size = nrow(faithful)+nNoise,
replace = TRUE, prob = c(3,1)/4)
mod5 <- Mclust(data, initialization = list(noise = NoiseInit))
summary(mod5, parameter = TRUE)
plot(mod5, what = "classification")
library("dbscan")
ata(moons)
res <- hdbscan(moons, minPts = 5)
res
plot(res)
data(moons)
res <- hdbscan(moons, minPts = 5)
res
plot(res)
plot(moons, col = res$cluster + 1L)
library(factoextra)
data("iris")
head(iris)
# Remove species column (5) and scale the data
iris.scaled <- scale(iris[, -5])
# K-means clustering
# +++++++++++++++++++++
km.res <- kmeans(iris.scaled, 3, nstart = 10)
# Visualize kmeans clustering
# use repel = TRUE to avoid overplotting
fviz_cluster(km.res, iris[, -5], ellipse.type = "norm")
# Change the color palette and theme
fviz_cluster(km.res, iris[, -5],
palette = "Set2", ggtheme = theme_minimal())
## Not run:
# Show points only
fviz_cluster(km.res, iris[, -5], geom = "point")
# Show text only
fviz_cluster(km.res, iris[, -5], geom = "text")
# PAM clustering
# ++++++++++++++++++++
require(cluster)
pam.res <- pam(iris.scaled, 3)
# Visualize pam clustering
fviz_cluster(pam.res, geom = "point", ellipse.type = "norm")
# Hierarchical clustering
# ++++++++++++++++++++++++
# Use hcut() which compute hclust and cut the tree
hc.cut <- hcut(iris.scaled, k = 3, hc_method = "complete")
# Visualize dendrogram
fviz_dend(hc.cut, show_labels = FALSE, rect = TRUE)
# Visualize cluster
fviz_cluster(hc.cut, ellipse.type = "convex")
fviz_mclust(mc, "classification", geom = "point",
pointsize = 1.5, palette = "jco")
require("mclust")
data("diabetes")
mc <- Mclust(diabetes[, -1])
# Visaulize BIC values
fviz_mclust_bic(mc)
# Visualize classification
fviz_mclust(mc, "classification", geom = "point")
require("mclust")
data("diabetes")
mc <- Mclust(diabetes[, -1])
# Visaulize BIC values
fviz_mclust_bic(mc)
# Visualize classification
fviz_mclust(mc, "classification", geom = "point", main="", xlab="", ylab="")
fviz_mclust(mc, "classification", geom = "point", main="", xlab="", ylab="", legend="none"")
fviz_mclust(mc, "classification", geom = "point", main="", xlab="", ylab="", legend="none")
fviz_mclust(mc, "classification", geom = "point", main="", xlab="", ylab="")
fviz_mclust(mc, "classification", geom = "point", main="", xlab="", ylab="", model.names = NULL,)
library(Clustering)
Clustering::appClustering()
library(Clustering)
Clustering::appClustering()
library(Clustering)
Clustering::appClustering()
